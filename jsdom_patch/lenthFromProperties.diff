--- lib/jsdom/browser/domtohtml.js
+++ b/lib/jsdom/browser/domtohtml.js
@@ -115,14 +115,15 @@
           } else {
             ret += curIndent + current.start;
           }
-          if (node._childNodes.length > 0) {
+          var len = node._childNodes.length;
+          if (len > 0) {
             if (node._childNodes[0].nodeType !== node.TEXT_NODE) {
               ret += eol;
             }
-            for (i=0; i<node._childNodes.length; i++) {
+            for (i=0; i<len; i++) {
               ret += generateHtmlRecursive(node._childNodes[i], childNodesRawText, curIndent + indentUnit);
             }
-            if (node._childNodes[node._childNodes.length - 1].nodeType !== node.TEXT_NODE) {
+            if (node._childNodes[len - 1].nodeType !== node.TEXT_NODE) {
               ret += curIndent;
             }
             ret += current.end + eol;
--- lib/jsdom/level1/core.js
+++ b/lib/jsdom/level1/core.js
@@ -523,8 +523,8 @@
 
     // fragments are merged into the element
     if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
-      var tmpNode;
-      while (newChild._childNodes.length > 0) {
+      var tmpNode, i = newChild._childNodes.length;
+      while (i-- > 0) {
         tmpNode = newChild.removeChild(newChild.firstChild);
         this.insertBefore(tmpNode, refChild);
       }
@@ -624,7 +624,7 @@
     if (this.id) {
       attachId(this.id,this,this._ownerDocument);
     }
-    for (var i=0;i<this._childNodes.length;i++) {
+    for (var i=0,len=this._childNodes.length;i<len;i++) {
       if (this._childNodes[i]._attach) {
         this._childNodes[i]._attach();
       }
@@ -637,7 +637,7 @@
     if (this.id) {
       detachId(this.id,this,this._ownerDocument);
     }
-    for (var i=0;i<this._childNodes.length;i++) {
+    for (var i=0,len=this._childNodes.length;i<len;i++) {
       this._childNodes[i]._detach();
     }
   },
