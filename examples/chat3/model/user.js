// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, User, lodash;

  EventEmitter = require('events').EventEmitter;

  lodash = require('lodash');

  User = (function() {
    function User(name, eventHandler) {
      this.name = name;
      this.eventHandler = eventHandler;
      this.joinedRooms = [];
      this.otherRooms = [];
      this.currentRoom = null;
    }

    User.prototype.getName = function() {
      return this.name;
    };

    User.prototype.activateRoom = function(room) {
      return this.currentRoom = room;
    };

    User.prototype.deactivateRoom = function() {
      return this.currentRoom = null;
    };

    User.prototype.join = function(room) {
      if (this.joinedRooms.indexOf(room) === -1) {
        this.removeFromOtherRooms(room);
        this.joinedRooms.push(room);
        room.on('newMessage', this.eventHandler);
      }
      return this.activateRoom(room);
    };

    User.prototype.leave = function(room) {
      var idx;
      idx = this.joinedRooms.indexOf(room);
      if (idx !== -1) {
        this.joinedRooms.splice(idx, 1);
      }
      this.addToOtherRooms(room);
      if (this.currentRoom === room) {
        if (this.joinedRooms.length) {
          return this.activateRoom(this.joinedRooms[0]);
        } else {
          return this.deactivateRoom();
        }
      }
    };

    User.prototype.removeFromOtherRooms = function(room) {
      var idx;
      idx = this.otherRooms.indexOf(room);
      if (idx !== -1) {
        return this.otherRooms.splice(idx, 1);
      }
    };

    User.prototype.addToOtherRooms = function(room) {
      console.log("" + this.name + " add " + room.name + " to other rooms " + (lodash.pluck(this.otherRooms, 'name')));
      if (this.otherRooms.indexOf(room) === -1) {
        this.otherRooms.push(room);
      }
      return console.log("" + this.name + " after add " + room.name + " to other rooms " + (lodash.pluck(this.otherRooms, 'name')));
    };

    User.prototype.getSerializableInfo = function() {
      var joinedRooms, otherRooms, room, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      joinedRooms = [];
      _ref = this.joinedRooms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        room = _ref[_i];
        joinedRooms.push(room.getName());
      }
      otherRooms = [];
      _ref1 = this.otherRooms;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        room = _ref1[_j];
        otherRooms.push(room.getName());
      }
      return {
        name: this.getName(),
        currentRoom: (_ref2 = this.currentRoom) != null ? _ref2.getName() : void 0,
        joinedRooms: joinedRooms,
        otherRooms: otherRooms
      };
    };

    User.prototype.setEventHandler = function(eventHandler) {
      return this.eventHandler = eventHandler;
    };

    return User;

  })();

  module.exports = User;

}).call(this);
