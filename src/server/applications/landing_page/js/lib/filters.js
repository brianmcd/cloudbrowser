// Generated by CoffeeScript 1.6.3
(function() {
  var filters;

  filters = angular.module('CBLandingPage.filters', []);

  filters.filter('permissionFilter', function() {
    return function(list, arg) {
      var entity, modifiedList, numCollaborators, owner, type, user, _base, _base1, _base2, _base3, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      type = arg.type, user = arg.user;
      modifiedList = [];
      switch (type) {
        case 'owned':
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            entity = list[_i];
            if (entity.api.isOwner(user)) {
              modifiedList.push(entity);
            }
          }
          break;
        case 'notOwned':
          for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
            entity = list[_j];
            if (!entity.api.isOwner(user)) {
              modifiedList.push(entity);
            }
          }
          break;
        case 'shared':
          for (_k = 0, _len2 = list.length; _k < _len2; _k++) {
            entity = list[_k];
            owner = typeof entity.api.getOwner === "function" ? 1 : 0;
            numCollaborators = owner + entity.api.getReaderWriters().length + ((typeof (_base = entity.api).getOwners === "function" ? _base.getOwners().length : void 0) || 0) + ((typeof (_base1 = entity.api).getReaders === "function" ? _base1.getReaders().length : void 0) || 0);
            if (numCollaborators > 1) {
              modifiedList.push(entity);
            }
          }
          break;
        case 'notShared':
          for (_l = 0, _len3 = list.length; _l < _len3; _l++) {
            entity = list[_l];
            owner = typeof entity.api.getOwner === "function" ? 1 : 0;
            console.log("owner = " + owner);
            numCollaborators = owner + entity.api.getReaderWriters().length + ((typeof (_base2 = entity.api).getOwners === "function" ? _base2.getOwners().length : void 0) || 0) + ((typeof (_base3 = entity.api).getReaders === "function" ? _base3.getReaders().length : void 0) || 0);
            if (numCollaborators === 1) {
              modifiedList.push(entity);
            }
          }
          break;
        case 'all':
          modifiedList = list;
      }
      return modifiedList;
    };
  });

}).call(this);
