// Generated by CoffeeScript 1.6.3
(function() {
  var Async, NwGlobal, app, appConfig, curVB;

  Async = require('async');

  NwGlobal = require('nwglobal');

  app = angular.module('CBLandingPage.directives', []);

  curVB = cloudbrowser.currentBrowser;

  appConfig = curVB.getAppConfig();

  app.directive('cbTypeahead', function() {
    var pruneList;
    pruneList = function(users, scope) {
      var entity, method, newList, role, shouldAdd, user, _i, _j, _len, _len1, _ref, _ref1;
      newList = [];
      _ref = scope.shareForm, role = _ref.role, entity = _ref.entity;
      shouldAdd = true;
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        if (user === scope.user) {
          continue;
        }
        _ref1 = role.checkMethods;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          method = _ref1[_j];
          if (entity.api[method](user)) {
            shouldAdd = false;
            break;
          }
        }
        if (shouldAdd) {
          newList.push(user);
        }
      }
      return newList;
      /*
      # Asynchronous version of pruning
      Async.each users, (user, callback) ->
          waterfallMethods = NwGlobal.Array()
          # Removing self from list
          waterfallMethods.push (next) ->
              if scope.user is user then callback(null, false)
              else next(null, true)
      
          for method in role.checkMethods
              do (method) ->
                  waterfallMethods.push (dontIncludeInList, next) ->
                      entity.api[method](user, next)
                  waterfallMethods.push (dontIncludeInList, next) ->
                      if dontIncludeInList then callback(null, false)
                      # Required for the final callback to check if it must include
                      # the user in the list or not
                      else next(null, true)
      
          Async.waterfall waterfallMethods, (err, include) ->
              return callback(err) if err
              if include then newList.push(user)
              callback(null)
      , (err) ->
          callback(err, newList)
      */

    };
    return function(scope, element, attrs) {
      return $(element).typeahead({
        source: function(query, process) {
          return appConfig.getUsers(function(err, users) {
            if (err) {
              return scope.safeApply(function() {
                return scope.setError(err);
              });
            } else {
              return process(pruneList(users, scope));
            }
          });
        },
        updater: function(item) {
          scope.$apply(attrs.ngModel + (" = '" + item + "'"));
          return item;
        }
      });
    };
  });

  app.directive('cbHasfocus', function() {
    return function(scope, element, attrs) {
      scope.$watch(attrs.cbHasfocus, function(nVal, oVal) {
        if (nVal) {
          return element[0].focus();
        }
      });
      element.bind('blur', function() {
        return scope.$apply(attrs.cbHasfocus + " = false", scope.browser.api.rename(scope.browser.name));
      });
      return element.bind('keydown', function(e) {
        if (e.which === 13) {
          return scope.$apply(attrs.cbHasfocus + " = false", scope.browser.api.rename(scope.browser.name));
        }
      });
    };
  });

}).call(this);
