// Generated by CoffeeScript 1.8.0
(function() {
  var Async, CBAdminInterface, NwGlobal;

  Async = require('async');

  NwGlobal = require('nwglobal');

  CBAdminInterface = angular.module("CBAdminInterface.controller", ['CBAdminInterface.models']).config(function($sceDelegateProvider) {
    return $sceDelegateProvider.resourceUrlWhitelist(['self', "file://**"]);
  });

  CBAdminInterface.controller("AppCtrl", [
    '$scope', 'cb-appManager', '$timeout', function($scope, appManager, $timeout) {
      var Switch, addApp, addAppInstance, addAppInstances, addBrowser, addBrowsers, addToUserList, addUser, curVB, fileUploader, listsToRoles, name, path, removeAppInstance, removeBrowser, removeFromUserList, serverConfig, setupEventListeners, _ref;
      $scope.templates = {
        "switch": "switch.html",
        appTable: "app_table.html",
        appUsers: "app_users.html",
        appBrowsers: "app_browsers.html",
        appInstances: "app_instances.html",
        appDescription: "app_description.html",
        searchAndLogout: "search_and_logout.html",
        selectedAppTable: "selected_app_table.html"
      };
      _ref = $scope.templates;
      for (name in _ref) {
        path = _ref[name];
        $scope.templates[name] = "file://" + __dirname + "/partials/" + path;
      }
      $scope.safeApply = function(fn) {
        var phase;
        phase = this.$root.$$phase;
        if (phase === '$apply' || phase === '$digest') {
          if (fn) {
            return fn();
          }
        } else {
          return this.$apply(fn);
        }
      };
      curVB = cloudbrowser.currentBrowser;
      serverConfig = cloudbrowser.serverConfig;
      $scope.search = "";
      $scope.apps = appManager.items;
      Switch = (function() {
        function Switch(property, toggleMethods, label, title) {
          this.property = property;
          this.toggleMethods = toggleMethods;
          this.label = label;
          this.title = title;
          if (title == null) {
            this.title = this.label.on;
          }
        }

        Switch.prototype.value = function(app) {
          return app[this.property];
        };

        Switch.prototype.toggle = function(app) {
          var property, successVal, toggleMethod;
          toggleMethod = this.toggleMethods.on;
          successVal = true;
          if (this.value(app)) {
            toggleMethod = this.toggleMethods.off;
            successVal = false;
          }
          property = this.property;
          console.log("toggle " + app.name + " " + property + " to " + successVal);
          return app.api[toggleMethod](function(err) {
            var errorMsg;
            if (err != null) {
              errorMsg = "set " + app.name + " " + property + " to " + successVal + " failed";
              $scope.safeApply(function() {
                return $scope.setError(errorMsg);
              });
              console.log(err);
              return console.log(errorMsg);
            }
            $scope.safeApply(function() {
              return app[property] = successVal;
            });
            return console.log("successfully set " + app.name + " " + property + " to " + successVal);
          });
        };

        return Switch;

      })();
      $scope.switches = [
        new Switch('isPublic', {
          on: 'makePublic',
          off: 'makePrivate'
        }, {
          on: 'Public',
          off: 'Private'
        }), new Switch('isAuthEnabled', {
          on: 'enableAuthentication',
          off: 'disableAuthentication'
        }, {
          on: 'On',
          off: 'Off'
        }, 'Authentication'), new Switch('mounted', {
          on: 'mount',
          off: 'disable'
        }, {
          on: 'Mounted',
          off: 'Disabled'
        }, 'Mounted')
      ];
      $scope.user = curVB.getCreator();
      $scope.setError = function(err) {
        $scope.error = err;
        return $timeout(function() {
          return $scope.error = null;
        }, 5000);
      };
      listsToRoles = {
        owner: 'owner',
        owners: 'owner',
        readers: 'reader',
        readerwriters: 'readerwriter'
      };
      addToUserList = function(app, user, list, id, role) {
        var u;
        u = app.userMgr.add(user);
        return u[list].add({
          id: id,
          role: role
        });
      };
      removeFromUserList = function(app, user, list, id) {
        var u;
        u = app.userMgr.find(user);
        return u[list].remove(id);
      };
      addUser = function(app, user) {
        app.userMgr.add(user);
        return app.api.getBrowsers(user, function(err, browserConfigs) {
          var browserConfig, u, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = browserConfigs.length; _i < _len; _i++) {
            browserConfig = browserConfigs[_i];
            u = app.browserMgr.find(browserConfig.getID());
            _results.push(browserConfig.getUserPrevilege(function(err, result) {
              if (err != null) {
                return setError(err);
              }
              if (result != null) {
                switch (result) {
                  case 'own':
                    return $scope.safeApply(function() {
                      return u.owners.add({
                        id: browserConfig.getID(),
                        role: 'owner'
                      });
                    });
                  case 'readwrite':
                    return $scope.safeApply(function() {
                      return u.readerwriters.add({
                        id: browserConfig.getID(),
                        role: 'readerwriter'
                      });
                    });
                  case 'readonly':
                    return $scope.safeApply(function() {
                      return u.readers.add({
                        id: browserConfig.getID(),
                        role: 'reader'
                      });
                    });
                }
              }
            }));
          }
          return _results;
        });
      };
      addBrowsers = function(app, browserConfigs, callback) {
        var browserConfig, _i, _len;
        if (browserConfigs != null) {
          for (_i = 0, _len = browserConfigs.length; _i < _len; _i++) {
            browserConfig = browserConfigs[_i];
            addBrowser(app, browserConfig);
          }
        }
        $scope.safeApply(function() {});
        if (callback != null) {
          return callback(null);
        }
      };
      addBrowser = function(app, browserConfig) {
        var appInstance, browser, list, listName, role, user, _i, _len;
        browser = app.browserMgr.find(browserConfig.getID());
        if (browser) {
          return browser;
        }
        browser = app.browserMgr.add(browserConfig);
        appInstance = app.appInstanceMgr.find(browser.appInstanceID);
        if (appInstance == null) {
          console.log("the appinstance is not registed for browser " + (browserConfig.getID()));
          return;
        }
        appInstance.browserIDMgr.add(browser.id);
        for (listName in listsToRoles) {
          role = listsToRoles[listName];
          list = browser[listName];
          if (list instanceof NwGlobal.Array) {
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              user = list[_i];
              addToUserList(app, user, 'browserIDMgr', browser.id, role);
            }
          }
        }
        browser.api.addEventListener('connect', function(userInfo) {
          return $scope.safeApply(function() {
            return browser.connectedClientMgr.add(userInfo);
          });
        });
        browser.api.addEventListener('disconnect', function(email) {
          return $scope.safeApply(function() {
            return browser.connectedClientMgr.remove(email);
          });
        });
        return browser.api.addEventListener('share', function(userInfo) {
          user = userInfo.user, role = userInfo.role;
          return $scope.safeApply(function() {
            browser.addUser(user, role);
            return addToUserList(app, user, 'browserIDMgr', browser.id, role);
          });
        });
      };
      removeBrowser = function(app, browserID) {
        var appInstance, browser, list, listName, role, user, _results;
        browser = app.browserMgr.remove(browserID);
        if (!browser) {
          return;
        }
        if (browser.appInstanceID) {
          appInstance = app.appInstanceMgr.find(browser.appInstanceID);
          appInstance.browserIDMgr.remove(browser.id);
        }
        _results = [];
        for (listName in listsToRoles) {
          role = listsToRoles[listName];
          list = browser[listName];
          if (list instanceof NwGlobal.Array) {
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (_i = 0, _len = list.length; _i < _len; _i++) {
                user = list[_i];
                _results1.push(removeFromUserList(app, user, 'browserIDMgr', browser.id));
              }
              return _results1;
            })());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      addAppInstances = function(app, appInstanceConfigs, callback) {
        var appInstanceConfig, _i, _len;
        for (_i = 0, _len = appInstanceConfigs.length; _i < _len; _i++) {
          appInstanceConfig = appInstanceConfigs[_i];
          addAppInstance(app, appInstanceConfig);
        }
        $scope.safeApply(function() {});
        return callback(null);
      };
      addAppInstance = function(app, appInstanceConfig) {
        var appInstance, list, listName, role, user, _i, _len;
        appInstance = app.appInstanceMgr.find(appInstanceConfig.getID());
        if (appInstance) {
          return appInstance;
        }
        appInstance = app.appInstanceMgr.add(appInstanceConfig);
        for (listName in listsToRoles) {
          role = listsToRoles[listName];
          list = appInstance[listName];
          if (typeof list === "string") {
            addToUserList(app, list, 'appInstanceIDMgr', appInstance.id, role);
          } else if (list instanceof NwGlobal.Array) {
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              user = list[_i];
              addToUserList(app, user, 'appInstanceIDMgr', appInstance.id, role);
            }
          }
        }
        appInstance.api.addEventListener('share', function(user) {
          return $scope.safeApply(function() {
            appInstance.addUser(user);
            return addToUserList(app, user, 'appInstanceIDMgr', appInstance.id, 'readwriter');
          });
        });
        appInstance.api.addEventListener("addBrowser", function(browserConfig) {
          return $scope.safeApply(function() {
            return addBrowser(app, browserConfig);
          });
        });
        appInstance.api.addEventListener("removeBrowser", function(id) {
          return $scope.safeApply(function() {
            return removeBrowser(app, id);
          });
        });
        return appInstanceConfig.getAllBrowsers(function(err, browserConfigs) {
          if (err != null) {
            console.log("error in getAllBrowsers " + err);
            return console.log(err.stack);
          }
          return addBrowsers(app, browserConfigs);
        });
      };
      removeAppInstance = function(app, appInstanceID) {
        var appInstance, list, listName, role, user, _results;
        appInstance = app.appInstanceMgr.remove(appInstanceID);
        if (appInstance == null) {
          console.log("appInstance " + appInstanceId + " not found");
          return;
        }
        _results = [];
        for (listName in listsToRoles) {
          role = listsToRoles[listName];
          list = appInstance[listName];
          if (typeof list === "string") {
            _results.push(removeFromUserList(app, list, 'appInstanceIDMgr', appInstanceID));
          } else if (list instanceof NwGlobal.Array) {
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (_i = 0, _len = list.length; _i < _len; _i++) {
                user = list[_i];
                _results1.push(removeFromUserList(app, user, 'appInstanceIDMgr', appInstanceID));
              }
              return _results1;
            })());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      setupEventListeners = function(app) {
        app.api.addEventListener("addAppInstance", function(appInstanceConfig) {
          return $scope.safeApply(function() {
            return addAppInstance(app, appInstanceConfig);
          });
        });
        app.api.addEventListener("removeAppInstance", function(id) {
          return $scope.safeApply(function() {
            return removeAppInstance(app, id);
          });
        });
        app.api.addEventListener("addUser", function(user) {
          return $scope.safeApply(function() {
            return addUser(app, user);
          });
        });
        return app.api.addEventListener("removeUser", function(user) {
          return $scope.safeApply(function() {
            return app.userMgr.remove(user);
          });
        });
      };
      addApp = function(appConfig) {
        var app;
        app = appManager.find(appConfig.getMountPoint());
        if (app != null) {
          console.log("remove existing " + app.name);
          appManager.remove(app);
        }
        app = appManager.add(appConfig);
        setupEventListeners(app);
        return Async.auto({
          'appInstances': function(next) {
            return app.api.getAppInstances(next);
          },
          'addAppInstances': [
            'appInstances', function(next, results) {
              return addAppInstances(app, results.appInstances, next);
            }
          ],
          'users': function(next) {
            return app.api.getUsers(next);
          },
          'addUsers': [
            'users', function(next, results) {
              var user, users, _i, _len;
              users = results.users;
              for (_i = 0, _len = users.length; _i < _len; _i++) {
                user = users[_i];
                app.userMgr.add(user);
              }
              return next(null);
            }
          ]
        }, function(err, results) {
          if (err) {
            console.log(err);
          }
          return $scope.safeApply(function() {});
        });
      };
      serverConfig.addEventListener("addApp", function(appConfig) {
        if (appConfig.isOwner() && appConfig.isStandalone()) {
          return addApp(appConfig);
        }
      });
      serverConfig.addEventListener("removeApp", function(mountPoint) {
        console.log("remove " + mountPoint);
        return appManager.remove(mountPoint);
      });
      fileUploader = curVB.createComponent('fileUploader', document.getElementById('file-uploader'), {
        legend: "Upload an Application",
        formClass: "form-inline well",
        buttonClass: "btn btn-primary"
      });
      fileUploader.addEventListener("cloudbrowser.upload", function(event) {
        var buffer, mimetype, _ref1;
        _ref1 = event.info, buffer = _ref1.buffer, mimetype = _ref1.mimetype;
        console.log("got file");
        if (mimetype !== "application/x-gzip") {
          console.log("invalid mimetype " + mimetype);
          $scope.safeApply(function() {
            return $scope.setError("File must be a gzipped tarball, the file uploaded is " + mimetype + ".");
          });
          return;
        }
        return serverConfig.uploadAndCreateApp(buffer, function(err) {
          return $scope.safeApply(function() {
            if (err != null) {
              return $scope.setError(err);
            } else {
              return $scope.setError("Application Uploaded.");
            }
          });
        });
      });
      $scope.init = function() {
        return serverConfig.listApps(['perUser'], function(err, appConfigs) {
          var appConfig, _i, _len;
          if (err) {
            return console.log(err);
          } else {
            for (_i = 0, _len = appConfigs.length; _i < _len; _i++) {
              appConfig = appConfigs[_i];
              if (appConfig.isStandalone()) {
                addApp(appConfig);
              }
            }
            return $scope.safeApply(function() {
              if ($scope.apps.length > 0) {
                return $scope.apps[0].selected = true;
              }
            });
          }
        });
      };
      $scope.init();
      $scope.leftClick = function(url) {
        return curVB.redirect(url);
      };
      $scope.editDescription = function(app) {
        if (app.api.isOwner()) {
          return app.editing = true;
        } else {
          return $scope.setError("only owner can edit description");
        }
      };
      $scope.select = function(app) {
        var a, _i, _len, _ref1, _results;
        _ref1 = $scope.apps;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          a = _ref1[_i];
          if (a !== app) {
            _results.push(a.selected = false);
          } else {
            _results.push(a.selected = true);
          }
        }
        return _results;
      };
      $scope.sortBy = function(predicate) {
        var reverseProp;
        $scope.predicate = predicate;
        reverseProp = "" + predicate + "-reverse";
        $scope[reverseProp] = !$scope[reverseProp];
        return $scope.reverse = $scope[reverseProp];
      };
      return $scope.logout = function() {
        return cloudbrowser.auth.logout();
      };
    }
  ]);

}).call(this);
